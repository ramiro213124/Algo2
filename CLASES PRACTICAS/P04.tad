//Autobus magico

TAD Autobús
Géneros:	autobús

observadores básicos
	estudiantes : autobús -> conj(estudiante)
	viajesDisponibles : autobús am -> conj(viaje)
	viajesHechosPor : estudiante e × autobús am -> conj(viaje) {e ∈ estudiantes(am)}
	aprendizaje : viaje v × autobús am -> nat {v ∈ viajesTotales(am)}
	
generadores
	nuevo : conj(estudiante) -> autobús
	agregarViaje : viaje v × nat × autobús am -> autobús 	{(v /∈ viajesTotales(am))}
	viajar : viaje v × conj(estudiante) c × autobús am -> autobús {(v ∈ viajesDisponibles(am)) ∧ (¬∅?(c)) ∧ (#(c) ≤ 8) ∧ (c ⊆ estudiantes(am))}


otras operaciones
	sabiduría : estudiante e × autobús am -> nat {e ∈ estudiantes(am)}
	viajesTotales : autobús -> conj(viaje)
	mayorSabiduría : autobús -> nat
Axiomas:
		(...)
Fin TAD




Representación:			
	autobús se representa con estr donde 
			estr es tupla〈 disponibles: conj(viaje),
											realizados: dicc(viaje, conj(estudiante)),
											valor_didáctico: dicc(viaje, nat),
											sabiduría: dicc(estudiante, nat),
											mayor_sab: nat 〉

Solución Informal:
	• e.disponibles son todos los viajes actualmente disponibles,
	• e.realizados indica qué estudiantes realizaron cada viaje,
	• e.valor_didáctico indica el valor de aprendizaje de cada viaje,
	• e.sabiduría indica el nivel de sabiduría de cada estudiante,
	• e.mayor_sab es el mayor valor de sabiduría existente.
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)
		donde: 
		(1)	≡	e.arg₀ > ...
		(2)	≡	(∀n: nat)(e.arg₁ < ...)
---
Función de abstracción:
	Abs:	estr	->	tipoDato	{Rep(e)}
	(∀e: estr) Abs(e) =obs td: tipoDato | (1)∧(2)
		donde: 
		(1)	≡	obs₁(td) = ...
		(2)	≡	obs₂(td) = ...
---
Interfaz:
	Parámetros formales:
		Géneros:	α
		Función:
			Copiar(in a:α) -> res: α
			Pre ≡ {true}
			Post ≡ {res = a} 
			Complejidad: Θ(copy(a))
			Descripción: Función copia de α's.
			---
	Se explica con:	TipoDato
	Géneros:		tipoDato
	
	Operaciones básicas:
		NuevaOp(in n: nat)	-> res: tipoDato
		Pre ≡ {true}
		Post ≡ {res =obs ...}
		Complejidad: Θ(1)
		Descripción: Genera ...
		Aliasing: No presenta aspectos de aliasing.
		---		
	Algoritmos del módulo:
		iNuevaOp(in n: nat) -> res: estr
			res ← ⟨0, 9⟩	// Ejemplo
		---
