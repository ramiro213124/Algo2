// Introduccion a diseño y eleccion de estructuras basico
// Ex 1 ¡Subite!
En las boleterias se venden tarjetas de 1, 2, 5, 10, y 30 viajes. En la entrada a los
andenes hay molinetes con lectores de tarjetas. Cuando el usuario pasa su tarjeta por
el lector:
			-Si la tarjeta esta agotada o es invalida, se informa de esto en el visor y no 
			se abre el molinete.
			-Si hay viajes en la tarjeta:
				*Se abre el molinite.
				*Se muestra el saldo restante en el visor.
				*Se actualiza en el sistema el nuevo saldo para esa tarjeta.
				*Se registra en el sistema el dia y la hora del acceso.
Nos piden tiempo de acceso sublineal (en la cantidad total de tarjetas y en peor caso)
para la operacion de usar tarjeta.

TAD Tarjeta ES nat
TAD fechaHora ES tupla<nat,nat>

TAD Subite
Géneros:	subite
Observadores Básicos:
	tarjetas: subite -> conj(tarjeta)
	credito: subite s × tarjeta t -> nat				{t ∈ tarjetas(s)}
	viajes: subite s × tarjeta t -> secu(fechaHora) {t ∈ tarjetas(s)}
Generadores:
	crear:  -> subite
	nuevaTarjeta: subite s × nat c -> subite {c ∈ {1,2,5,10,30}}
	usarTarjeta: subite s × tarjeta t × fechaHora -> subite {t ∈ tarjetas(s) ∧ credito(s,t) >0}
Axiomas:
	(...)
Fin TAD

------------------  Modulo Subite  -----------------------------

Representación:
	Subite se representa con estr donde 
		estr es tupla ⟨	arg:	diccAVL(tarjeta, datosTarjeta) ⟩
		Donde:
		- tarjeta es nat
		- datosTarjeta es tupla⟨credito: nat, viajes: listaEnlazada(fechaHora)⟩
		

Solución Informal:
	- e.arg₀ + 1 debe ser ...
	- si e.arg₁ ...
---

Interfaz:
	Parámetros formales:
		Géneros:	α
		Función:
			Copiar(in a:α) -> res: α
			Pre ≡ {true}
			Post ≡ {res = a} 
			Complejidad: Θ(copy(a))
			Descripción: Función copia de α's.
			---
	Se explica con:	TAD Subite
	Géneros:		Subite
	
Operaciones básicas:
	crear()	-> res: Subite
	Pre ≡ {true}
	Post ≡ {res =obs crear}
	Complejidad: La definiremos luego de tener la estructura
	Descripción: Crear una nueva instancia
	Aliasing: -
	---		
	nuevaTarjeta(inout s: subite, in c: nat)	-> res: tarjeta
	Pre ≡ {s=s0 ∧ c ∈ {1,2,5,10,30}}
	Post ≡ {s= nuevaTarjeta(s0,c) ∧L res =obs dameUno(tarjetas(s) - tarjetas(s0))}
	Complejidad: La definiremos luego de tener la estructura
	Descripción: Agrega una nueva tarjeta al sistema y la retorna
	Aliasing: Se devuelve una referencia no modificable a la nueva tarjeta.
	---		
	usarTarjeta(inout s: subite, in t: tarjeta, in h:fechaHora, out c:nat)	-> res: bool
	Pre ≡ {s=s0}
	Post ≡ {res =obs (t ∈ tarjetas(s0) ∧L credito(s0,t) > 0) ∧L
		(res ⇒L s= usarTarjeta(s0,t,h) ∧L c=credito(s,t)) ∧ (¬res ⇒ s=s0)}
	Complejidad: La definiremos luego de tener la estructura (tiene que ser sublineal)
	Descripción: Si la tarjeta pasada por parametro esta registrada y todavia tiene
	credito, entonces registra el uso y retorna true, sino retorna false.
	Aliasing: Lo definiremos luego de tener la estructura.
	---		
	viajes(in s:subite, in t:tarjeta, out vs:secu(fechaHora))	-> res: bool
	Pre ≡ {true}
	Post ≡ {(res =obs t ∈ tarjetas(s)) ∧L (res ⇒L vs= viajes(s,t))}
	Complejidad: La definiremos luego de tener la estructura
	Descripción: Si la tarjeta pasada por parametro esta registrada, retorna true y
	asigna en viajes los viajes realizados, sino solo retorna false.
	Aliasing: Se devuelve una referencia no modificable a la lista de viajes realizados
	---		
	credito(in s:subite, in t:tarjeta, out cred:nat)	-> res: bool
	Pre ≡ {true}
	Post ≡ {(res =obs t ∈ tarjetas(s)) ∧L (res ⇒L cred= credito(s,t))}
	Complejidad: La definiremos luego de tener la estructura
	Descripción: Si la tarjeta pasada por parametro esta registrada, retorna true y
	asigna el credito en cred, sino solo retorna false.
	Aliasing: -
	---
Algoritmos del módulo:
	iusarTarjeta(inout s: subite, in t:tarjeta, in h: fechaHora, out credito:nat)
		if ¬definido?(s,t) then                    // O(log n)
			res <- false
		else
			datos <- obtener(s,t)										// O(log n)
			if datos.credito = 0 then
				res <- false
			else 
				datos.credito <- datos.credito - 1
				agregar(datos.viajes,h)              // O(1)
				credito <- datos.credito
				res <- true
			end if
		end if
		devolver res     // T(n) ∈ O(log n)
	---




	
	





































//Autobus magico

TAD Autobús
Géneros:	autobús

observadores básicos
	estudiantes : autobús -> conj(estudiante)
	viajesDisponibles : autobús am -> conj(viaje)
	viajesHechosPor : estudiante e × autobús am -> conj(viaje) {e ∈ estudiantes(am)}
	aprendizaje : viaje v × autobús am -> nat {v ∈ viajesTotales(am)}
	
generadores
	nuevo : conj(estudiante) -> autobús
	agregarViaje : viaje v × nat × autobús am -> autobús 	{(v /∈ viajesTotales(am))}
	viajar : viaje v × conj(estudiante) c × autobús am -> autobús {(v ∈ viajesDisponibles(am)) ∧ (¬∅?(c)) ∧ (#(c) ≤ 8) ∧ (c ⊆ estudiantes(am))}


otras operaciones
	sabiduría : estudiante e × autobús am -> nat {e ∈ estudiantes(am)}
	viajesTotales : autobús -> conj(viaje)
	mayorSabiduría : autobús -> nat
Axiomas:
		(...)
Fin TAD




Representación:			
	autobús se representa con estr donde 
			estr es tupla〈 disponibles: conj(viaje),
											realizados: dicc(viaje, conj(estudiante)),
											valor_didáctico: dicc(viaje, nat),
											sabiduría: dicc(estudiante, nat),
											mayor_sab: nat 〉

Solución Informal:
	• e.disponibles son todos los viajes actualmente disponibles,
	• e.realizados indica qué estudiantes realizaron cada viaje,
	• e.valor_didáctico indica el valor de aprendizaje de cada viaje,
	• e.sabiduría indica el nivel de sabiduría de cada estudiante,
	• e.mayor_sab es el mayor valor de sabiduría existente.
---
Invariante de Representación:
	Rep:	estr	->	boolean
	(∀e: estr) Rep(e)	≡ true ⇐⇒ (1)∧(2)
		donde: 
		(1)	≡	e.arg₀ > ...
		(2)	≡	(∀n: nat)(e.arg₁ < ...)
---
Función de abstracción:
	Abs:	estr	->	tipoDato	{Rep(e)}
	(∀e: estr) Abs(e) =obs td: tipoDato | (1)∧(2)
		donde: 
		(1)	≡	obs₁(td) = ...
		(2)	≡	obs₂(td) = ...
---
Interfaz:
	Parámetros formales:
		Géneros:	α
		Función:
			Copiar(in a:α) -> res: α
			Pre ≡ {true}
			Post ≡ {res = a} 
			Complejidad: Θ(copy(a))
			Descripción: Función copia de α's.
			---
	Se explica con:	TipoDato
	Géneros:		tipoDato
	
	Operaciones básicas:
		NuevaOp(in n: nat)	-> res: tipoDato
		Pre ≡ {true}
		Post ≡ {res =obs ...}
		Complejidad: Θ(1)
		Descripción: Genera ...
		Aliasing: No presenta aspectos de aliasing.
		---		
	Algoritmos del módulo:
		iNuevaOp(in n: nat) -> res: estr
			res ← ⟨0, 9⟩	// Ejemplo
		---
